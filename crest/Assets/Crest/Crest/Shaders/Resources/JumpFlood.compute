// Crest Ocean System

// This file is subject to the MIT License as seen in the root of this folder structure (LICENSE)

// An implementation of the Jump Flood algorithm by Rong and Tan
// Source: https://www.comp.nus.edu.sg/~tants/jfa.html

#pragma kernel JumpFlood

uint _jumpSize;
uint _textureDimension;

Texture2D<float4>   _FromTexture;
RWTexture2D<float4> _ToTexture;


[numthreads(8,8,1)]
void JumpFlood(uint3 id : SV_DispatchThreadID)
{
	float4 result = _FromTexture[id.xy];

	float sdfCurrent = result.y;

	bool rightIsInBounds = _textureDimension  - _jumpSize > id.x;
	bool upIsInBounds    = _textureDimension  - _jumpSize > id.y;
	bool leftIsInBounds  = id.x >= _jumpSize;
	bool downIsInBounds  = id.y >= _jumpSize;

	// TODO(TRC):Now mvoe this calculation to the CPU
	float jumpSizeSQR = sqrt((float) (_jumpSize * _jumpSize));

	float sdfUp          = upIsInBounds                      ? _FromTexture[id.xy + uint2(0         ,  _jumpSize)].y + _jumpSize   : sdfCurrent;
	float sdfUpRight     = upIsInBounds && rightIsInBounds   ? _FromTexture[id.xy + uint2(_jumpSize ,  _jumpSize)].y + jumpSizeSQR : sdfCurrent;
	float sdfRight       = rightIsInBounds                   ? _FromTexture[id.xy + uint2(_jumpSize ,          0)].y + _jumpSize   : sdfCurrent;
	float sdfRightDown   = rightIsInBounds && downIsInBounds ? _FromTexture[id.xy + uint2(_jumpSize , -_jumpSize)].y + jumpSizeSQR : sdfCurrent;
	float sdfDown        = downIsInBounds                    ? _FromTexture[id.xy + uint2(0         , -_jumpSize)].y + _jumpSize   : sdfCurrent;
	float sdfDownLeft    = downIsInBounds && leftIsInBounds  ? _FromTexture[id.xy + uint2(-_jumpSize, -_jumpSize)].y + jumpSizeSQR : sdfCurrent;
	float sdfLeft        = leftIsInBounds                    ? _FromTexture[id.xy + uint2(-_jumpSize,          0)].y + _jumpSize   : sdfCurrent;
	float sdfLeftUp      = leftIsInBounds && upIsInBounds    ? _FromTexture[id.xy + uint2(-_jumpSize,  _jumpSize)].y + jumpSizeSQR : sdfCurrent;

	result.y = min(
		min(
			min(
				min(
					sdfRight,
					sdfUp
				),
				min(
					sdfDown,
					sdfLeft
				)
			),
			min(
				min(
					sdfUpRight,
					sdfRightDown
				),
				min(
					sdfDownLeft,
					sdfLeftUp
				)
			)
		),
		sdfCurrent
	);
	_ToTexture[id.xy] = result;
}
